"""Spectra functions."""
import numpy as _np
import matplotlib.pyplot as _plt
from accelerator import StorageRingParameters
import json
import spectra
import sys
import time


class SpectraTools:
    """Class with general spectra tools."""

    @staticmethod
    def run_solver(input_template):
        """Run spectra.

        Args:
            input_template (dict): Dictionary containing
            calculation parameters.

        Returns:
            dict: Output data dictionary
        """
        input_str = json.dumps(input_template)

        # call solver with the input string (JSON format)
        solver = spectra.Solver(input_str)

        # check if the parameter load is OK
        isready = solver.IsReady()
        if isready is False:
            print("Parameter load failed.")
            sys.exit()

        t0 = time.time()
        # start calculation
        solver.Run()
        dt = time.time() - t0
        print("elapsed time: {0:.1f} s".format(dt))
        return solver


class CalcFlux(SpectraTools, StorageRingParameters):
    """Class with methods to calculate flux."""

    class CalcTypes:
        """Sub class to define calculation parameters."""

        user_defined = "userdefined"
        near_field = "nearfield"
        wigner = "wigner"
        energy = "en"
        mesh_xy = "xy"
        flux_density = "flux_density"
        flux_circ_slit = "partialflux_circslit"
        flux_ret_slit = "partialflux_retslit"

    def __init__(self):
        """Class constructor."""
        self._source_type = self.CalcTypes.user_defined
        self._method = self.CalcTypes.near_field
        self._indep_var = self.CalcTypes.energy
        self._output = self.CalcTypes.flux_density
        self._field = None

    @property
    def source_type(self):
        """Source type.

        Returns:
            CalcTypes variables: Magnetic field, it can be defined by user or
            generated by spectra.
        """
        return self._source_type

    @property
    def method(self):
        """Method of calculation.

        Returns:
            CalcTypes variables: Method of calculation, it can be near field
            or wigner functions, for example.
        """
        return self._method

    @property
    def indep_var(self):
        """Independent variable.

        Returns:
            CalcTypes variables: Independet variable, it can be energy of a
            mesh in the xy plane
        """
        return self._indep_var

    @property
    def output(self):
        """Output type.

        Returns:
            CalcTypes variables: Output type, it can be flux density or
            partial flux, for example.
        """
        return self._output

    @property
    def field(self):
        """Magnetic field defined by user.

        Returns:
            numpy array: First column contains longitudinal spatial
            coordinate (z) [mm], second column contais vertical field
            [T], and third column constais horizontal field [T].
        """
        return self._field

    @source_type.setter
    def source_type(self, value):
        self._source_type = value

    @method.setter
    def method(self, value):
        self._method = value

    @indep_var.setter
    def indep_var(self, value):
        self._indep_var = value

    @output.setter
    def output(self, value):
        self._output = value

    @field.setter
    def field(self, value):
        if self.source_type != self.CalcTypes.user_defined:
            raise ValueError(
                "Field can only be defined if source type is user_defined."
            )
        else:
            self._field = value
